<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BookWormApi</name>
    </assembly>
    <members>
        <member name="T:BookWormApi.Controllers.TextParsingController">
            <summary>
            Web API Controller for running text manipulation/statistics.
            </summary>
        </member>
        <member name="M:BookWormApi.Controllers.TextParsingController.#ctor(Amazon.S3.IAmazonS3)">
            <summary>
            The controller to start up for service requests
            </summary>
            <param name="s3Client">This client should save the requests and 
            responses to S3 Http enabled bucket but I didn't have time to finish it</param>
        </member>
        <member name="M:BookWormApi.Controllers.TextParsingController.Post(BookWormApi.Models.TextParsingInput,BookWormApi.SortType)">
            <summary>
            Takes a text and sorts it according to the sort type given.
            If the text contains only one sentence it will sort the words in 
            the sentence.
            Otherwise it will sort the sentences.
            </summary>
            <param name="input"><see cref="T:BookWormApi.Models.TextParsingInput"/>The input text to sort</param>
            <param name="sortType"><see cref="T:BookWormApi.SortType"/>The type of sorting to apply</param>
            <returns>The original text sorted according to the sort type</returns>
        </member>
        <member name="M:BookWormApi.Controllers.TextParsingController.Post(BookWormApi.Models.TextParsingInput)">
            <summary>
            Calculates some basic statistics about the given text.
            </summary>
            <param name="input"><see cref="T:BookWormApi.Models.TextParsingInput"/>The input text to analyze</param>
            <returns><see cref="T:BookWormApi.Models.TextStatistics"/>Basic statistics about the text provided</returns>
        </member>
        <member name="T:BookWormApi.SortType">
            <summary>
            Defines the type of sorting to be applied to the text
            </summary>
        </member>
        <member name="F:BookWormApi.SortType.Alphabetical">
            <summary>
            Sorts the text with words alphabetically
            </summary>
        </member>
        <member name="F:BookWormApi.SortType.Reverse">
            <summary>
            Reverses the word order in the text
            </summary>
        </member>
        <member name="F:BookWormApi.SortType.Length">
            <summary>
            Sorts the text by the length of the lines in the text
            </summary>
        </member>
        <member name="T:BookWormApi.LambdaEntryPoint">
            <summary>
            This class extends from APIGatewayProxyFunction which contains the method FunctionHandlerAsync which is the 
            actual Lambda function entry point. The Lambda handler field should be set to
            
            BookWormApi::BookWormApi.LambdaEntryPoint::FunctionHandlerAsync
            </summary>
        </member>
        <member name="M:BookWormApi.LambdaEntryPoint.Init(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            The builder has configuration, logging and Amazon API Gateway already configured. The startup class
            needs to be configured in this method using the UseStartup() method.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:BookWormApi.LocalEntryPoint">
            <summary>
            The Main function can be used to run the ASP.NET Core application locally using the Kestrel webserver.
            </summary>
        </member>
        <member name="M:BookWormApi.LocalEntryPoint.Main(System.String[])">
            <summary>
            Builds and runs the webhost
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:BookWormApi.LocalEntryPoint.BuildWebHost(System.String[])">
            <summary>
            Builds the webhost
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:BookWormApi.Models.PersistedRequestResponse">
            <summary>
            Class for holding the incoming request to the controller and it's
            response.
            Should be used to save the request/response pairs somewhere
            </summary>
        </member>
        <member name="P:BookWormApi.Models.PersistedRequestResponse.Request">
            <summary>
            The original request to save
            </summary>
        </member>
        <member name="P:BookWormApi.Models.PersistedRequestResponse.Statistics">
            <summary>
            The response in case it was a statistics call
            </summary>
        </member>
        <member name="P:BookWormApi.Models.PersistedRequestResponse.Response">
            <summary>
            The response in case it was a sorting call
            </summary>
        </member>
        <member name="M:BookWormApi.Models.PersistedRequestResponse.#ctor(BookWormApi.Models.TextParsingInput,BookWormApi.Models.TextStatistics)">
            <summary>
            Creates a new Request/Response pair
            </summary>
            <param name="input">The request received by the application</param>
            <param name="output">The response generated by the application</param>
        </member>
        <member name="M:BookWormApi.Models.PersistedRequestResponse.#ctor(BookWormApi.Models.TextParsingInput,System.String)">
            <summary>
            Creates a new Request/Response pair
            </summary>
            <param name="input">The request received by the application</param>
            <param name="output">The response generated by the application</param>
        </member>
        <member name="M:BookWormApi.Models.PersistedRequestResponse.ToString">
            <summary>
            Converts the response to Json
            </summary>
            <returns></returns>
        </member>
        <member name="T:BookWormApi.Models.TextParsingInput">
            <summary>
            Data contract for sending requests to the application
            </summary>
        </member>
        <member name="P:BookWormApi.Models.TextParsingInput.Text">
            <summary>
            The text to analyze
            </summary>
        </member>
        <member name="T:BookWormApi.Models.TextStatistics">
            <summary>
            Data contract for returning statistics from a text
            </summary>
        </member>
        <member name="P:BookWormApi.Models.TextStatistics.Words">
            <summary>
            A collection of the words from the incoming text
            </summary>
        </member>
        <member name="P:BookWormApi.Models.TextStatistics.Letters">
            <summary>
            A collection of all the letters in the incoming text
            </summary>
        </member>
        <member name="P:BookWormApi.Models.TextStatistics.Sentences">
            <summary>
            A collection of all the sentences in the incoming text
            </summary>
        </member>
        <member name="P:BookWormApi.Models.TextStatistics.WordCount">
            <summary>
            The number of words in the incoming text
            </summary>
        </member>
        <member name="P:BookWormApi.Models.TextStatistics.SpaceCount">
            <summary>
            The number of spaces in the incoming text
            </summary>
        </member>
        <member name="P:BookWormApi.Models.TextStatistics.LetterCount">
            <summary>
            The number of letters in the incoming text
            </summary>
        </member>
        <member name="P:BookWormApi.Models.TextStatistics.HyphenCount">
            <summary>
            The number of hyphens in the incoming text
            </summary>
        </member>
        <member name="P:BookWormApi.Models.TextStatistics.SentenceCount">
            <summary>
            The number of sentences in the incoming text
            </summary>
        </member>
        <member name="T:BookWormApi.Services.S3Persistence">
            <summary>
            This class should save all request/response pairs to S3
            </summary>
        </member>
        <member name="M:BookWormApi.Services.S3Persistence.#ctor(Amazon.S3.IAmazonS3)">
            <summary>
            Creates a new S3 persistance class
            </summary>
            <param name="s3Client"></param>
        </member>
        <member name="M:BookWormApi.Services.S3Persistence.SaveRequest(BookWormApi.Models.PersistedRequestResponse)">
            <summary>
            Saves the request/response pair to S3
            </summary>
            <param name="requestResponse"></param>
            <returns></returns>
        </member>
        <member name="T:BookWormApi.Services.TextSortingService">
            <summary>
            A service for sorting text according to the given sort type
            </summary>
        </member>
        <member name="M:BookWormApi.Services.TextSortingService.SortText(System.String,BookWormApi.SortType)">
            <summary>
            Sorts the incoming text according to the sort type
            </summary>
            <param name="text">The text to sort</param>
            <param name="sortType">The type of sorting to apply</param>
            <returns></returns>
        </member>
        <member name="T:BookWormApi.Services.TextStatisticsService">
            <summary>
            A service to filter text into sentences, words and letters
            </summary>
        </member>
        <member name="M:BookWormApi.Services.TextStatisticsService.CalculateStatistics(System.String)">
            <summary>
            Applies regexes on the incoming text to split it into letters, words and sentences
            </summary>
            <param name="text">The text to analyze</param>
            <returns><see cref="T:BookWormApi.Models.TextStatistics"/>Statistics about the text</returns>
        </member>
        <member name="M:BookWormApi.Services.TextStatisticsService.IsValidWord(System.String)">
            <summary>
            Filtering to remove invalid words, i.e. '.' '. ' etc.
            </summary>
            <param name="word">The word to check</param>
            <returns>Whether the word given is a valid word (only letters and numbers)</returns>
        </member>
        <member name="T:BookWormApi.Startup">
            <summary>
            Startup class to start the webserver
            </summary>
        </member>
        <member name="F:BookWormApi.Startup.AppS3BucketKey">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:BookWormApi.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates a new Startup class with the given configuration
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:BookWormApi.Startup.Configuration">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="M:BookWormApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:BookWormApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline
            </summary>
            <param name="app"></param>
            <param name="env"></param>        
        </member>
    </members>
</doc>
